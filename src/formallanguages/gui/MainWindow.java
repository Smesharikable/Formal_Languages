package formallanguages.gui;

import formallanguages.exceptions.IncorrectSymbolCodeException;
import formallanguages.exceptions.IncorrectSymbolTypeException;
import formallanguages.exceptions.ReadGrammarException;
import formallanguages.exceptions.TooLongRuleException;
import formallanguages.src.CFGrammar;
import formallanguages.src.CFRGrammar;
import formallanguages.src.FirstSet;
import formallanguages.src.Grammar;
import formallanguages.src.GrammarCoding;
import formallanguages.src.NonterminalLevels;
import formallanguages.src.SymbolicTable;
import formallanguages.src.TopologicalSort;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Ilya Shkuratov
 */
public class MainWindow extends javax.swing.JFrame {
    private JFileChooser fileDialog;
    private Grammar curGrammar;
    private String levels;
    private String relation;
    private String sGrammar;
    
    final private int initK = 1;
    final private int maxK = 10;
    final private int minK = 1;
    final private int stepK = 1;
    final String defaultLog = "logfile.txt";

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        fileDialog = new JFileChooser();
        fileDialog.setCurrentDirectory(new File("."));
        fileDialog.setFileFilter(new GrammarFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupLeft = new javax.swing.ButtonGroup();
        buttonGroupRight = new javax.swing.ButtonGroup();
        jSplitPane = new javax.swing.JSplitPane();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelSymbols = new javax.swing.JPanel();
        jScrollPaneNonterminals = new javax.swing.JScrollPane();
        jTextAreaNonterminals = new javax.swing.JTextArea();
        jScrollPaneTerminals = new javax.swing.JScrollPane();
        jTextAreaTerminals = new javax.swing.JTextArea();
        jButtonFirst = new javax.swing.JButton();
        jButtonFollow = new javax.swing.JButton();
        SpinnerModel model = new SpinnerNumberModel(initK, minK, maxK, stepK);
        jSpinnerK = new javax.swing.JSpinner(model);
        jTextFieldForm = new javax.swing.JTextField();
        jScrollPaneResult = new javax.swing.JScrollPane();
        jTextAreaResult = new javax.swing.JTextArea();
        jLabelForm = new javax.swing.JLabel();
        jLabelK = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jPanelLevels = new javax.swing.JPanel();
        jPanelButtons = new javax.swing.JPanel();
        jButtonLevel = new javax.swing.JButton();
        jButtonSubstitution = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(15, 0), new java.awt.Dimension(15, 0), new java.awt.Dimension(15, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jSplitPaneLevels = new javax.swing.JSplitPane();
        jSplitPaneLevels.setDividerLocation(0.5);
        jPanelLeft = new javax.swing.JPanel();
        jRadioButtonLevelsL = new javax.swing.JRadioButton();
        jRadioButtonGrammarL = new javax.swing.JRadioButton();
        jRadioButtonLogL = new javax.swing.JRadioButton();
        jRadioButtonRelationL = new javax.swing.JRadioButton();
        jLabelLeft = new javax.swing.JLabel();
        jScrollPaneLeft = new javax.swing.JScrollPane();
        jTextAreaLeft = new javax.swing.JTextArea();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanelRight = new javax.swing.JPanel();
        jScrollPaneRight = new javax.swing.JScrollPane();
        jTextAreaRight = new javax.swing.JTextArea();
        jLabelRight = new javax.swing.JLabel();
        jRadioButtonRelationR = new javax.swing.JRadioButton();
        jRadioButtonGrammarR = new javax.swing.JRadioButton();
        jRadioButtonLogR = new javax.swing.JRadioButton();
        jRadioButtonLevelsR = new javax.swing.JRadioButton();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        jMenuBar = new javax.swing.JMenuBar();
        jMenuGrammar = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemExport = new javax.swing.JMenuItem();
        jMenuItemReadFromArea = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GrammarEditor");
        setMaximumSize(new java.awt.Dimension(1024, 768));
        setMinimumSize(new java.awt.Dimension(600, 300));
        setPreferredSize(new java.awt.Dimension(700, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jSplitPane.setResizeWeight(0.25);

        jTabbedPane.setToolTipText("Tab for symbols inspection");
        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane.setMaximumSize(new java.awt.Dimension(800, 600));

        jPanelSymbols.setLayout(new java.awt.GridBagLayout());

        jTextAreaNonterminals.setEditable(false);
        jTextAreaNonterminals.setColumns(20);
        jTextAreaNonterminals.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaNonterminals.setLineWrap(true);
        jTextAreaNonterminals.setRows(2);
        jTextAreaNonterminals.setTabSize(4);
        jTextAreaNonterminals.setWrapStyleWord(true);
        jScrollPaneNonterminals.setViewportView(jTextAreaNonterminals);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanelSymbols.add(jScrollPaneNonterminals, gridBagConstraints);

        jTextAreaTerminals.setEditable(false);
        jTextAreaTerminals.setColumns(20);
        jTextAreaTerminals.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaTerminals.setLineWrap(true);
        jTextAreaTerminals.setRows(2);
        jTextAreaTerminals.setTabSize(4);
        jTextAreaTerminals.setWrapStyleWord(true);
        jScrollPaneTerminals.setViewportView(jTextAreaTerminals);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanelSymbols.add(jScrollPaneTerminals, gridBagConstraints);

        jButtonFirst.setText("First");
        jButtonFirst.setEnabled(false);
        jButtonFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFirstActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanelSymbols.add(jButtonFirst, gridBagConstraints);

        jButtonFollow.setText("Follow");
        jButtonFollow.setEnabled(false);
        jButtonFollow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFollowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanelSymbols.add(jButtonFollow, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        jPanelSymbols.add(jSpinnerK, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 0, 0);
        jPanelSymbols.add(jTextFieldForm, gridBagConstraints);

        jTextAreaResult.setEditable(false);
        jTextAreaResult.setColumns(20);
        jTextAreaResult.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaResult.setLineWrap(true);
        jTextAreaResult.setRows(1);
        jTextAreaResult.setWrapStyleWord(true);
        jScrollPaneResult.setViewportView(jTextAreaResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 15, 0);
        jPanelSymbols.add(jScrollPaneResult, gridBagConstraints);

        jLabelForm.setText("Sentential form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanelSymbols.add(jLabelForm, gridBagConstraints);

        jLabelK.setText("Length (k)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 0);
        jPanelSymbols.add(jLabelK, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelSymbols.add(filler6, gridBagConstraints);

        jTabbedPane.addTab("Symbols", jPanelSymbols);

        jPanelLevels.setLayout(new java.awt.GridBagLayout());

        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jButtonLevel.setText("Sort nonterminals");
        jButtonLevel.setEnabled(false);
        jButtonLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLevelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelButtons.add(jButtonLevel, gridBagConstraints);

        jButtonSubstitution.setText("Substitution");
        jButtonSubstitution.setEnabled(false);
        jButtonSubstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubstitutionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanelButtons.add(jButtonSubstitution, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanelButtons.add(filler9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelButtons.add(filler5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelLevels.add(jPanelButtons, gridBagConstraints);

        jSplitPaneLevels.setResizeWeight(0.5);

        jPanelLeft.setMinimumSize(new java.awt.Dimension(155, 360));
        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        buttonGroupLeft.add(jRadioButtonLevelsL);
        jRadioButtonLevelsL.setText("Levels");
        jRadioButtonLevelsL.setEnabled(false);
        jRadioButtonLevelsL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLevelsLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanelLeft.add(jRadioButtonLevelsL, gridBagConstraints);

        buttonGroupLeft.add(jRadioButtonGrammarL);
        jRadioButtonGrammarL.setText("Grammar");
        jRadioButtonGrammarL.setEnabled(false);
        jRadioButtonGrammarL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonGrammarLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanelLeft.add(jRadioButtonGrammarL, gridBagConstraints);

        buttonGroupLeft.add(jRadioButtonLogL);
        jRadioButtonLogL.setText("Log");
        jRadioButtonLogL.setEnabled(false);
        jRadioButtonLogL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLogLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 0);
        jPanelLeft.add(jRadioButtonLogL, gridBagConstraints);

        buttonGroupLeft.add(jRadioButtonRelationL);
        jRadioButtonRelationL.setText("Relation");
        jRadioButtonRelationL.setEnabled(false);
        jRadioButtonRelationL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRelationLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelLeft.add(jRadioButtonRelationL, gridBagConstraints);

        jLabelLeft.setText("Left area");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelLeft.add(jLabelLeft, gridBagConstraints);

        jTextAreaLeft.setColumns(20);
        jTextAreaLeft.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaLeft.setRows(5);
        jScrollPaneLeft.setViewportView(jTextAreaLeft);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelLeft.add(jScrollPaneLeft, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanelLeft.add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanelLeft.add(filler10, gridBagConstraints);

        jSplitPaneLevels.setLeftComponent(jPanelLeft);

        jPanelRight.setPreferredSize(new java.awt.Dimension(155, 360));
        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jTextAreaRight.setColumns(20);
        jTextAreaRight.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaRight.setRows(5);
        jScrollPaneRight.setViewportView(jTextAreaRight);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelRight.add(jScrollPaneRight, gridBagConstraints);

        jLabelRight.setText("Right area");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelRight.add(jLabelRight, gridBagConstraints);

        buttonGroupRight.add(jRadioButtonRelationR);
        jRadioButtonRelationR.setText("Relation");
        jRadioButtonRelationR.setEnabled(false);
        jRadioButtonRelationR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRelationRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelRight.add(jRadioButtonRelationR, gridBagConstraints);

        buttonGroupRight.add(jRadioButtonGrammarR);
        jRadioButtonGrammarR.setText("Grammar");
        jRadioButtonGrammarR.setEnabled(false);
        jRadioButtonGrammarR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonGrammarRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanelRight.add(jRadioButtonGrammarR, gridBagConstraints);

        buttonGroupRight.add(jRadioButtonLogR);
        jRadioButtonLogR.setText("Log");
        jRadioButtonLogR.setEnabled(false);
        jRadioButtonLogR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLogRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 0);
        jPanelRight.add(jRadioButtonLogR, gridBagConstraints);

        buttonGroupRight.add(jRadioButtonLevelsR);
        jRadioButtonLevelsR.setText("Levels");
        jRadioButtonLevelsR.setEnabled(false);
        jRadioButtonLevelsR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLevelsRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanelRight.add(jRadioButtonLevelsR, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanelRight.add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanelRight.add(filler11, gridBagConstraints);

        jSplitPaneLevels.setRightComponent(jPanelRight);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelLevels.add(jSplitPaneLevels, gridBagConstraints);

        jTabbedPane.addTab("Levels", jPanelLevels);

        jSplitPane.setRightComponent(jTabbedPane);

        jPanel.setLayout(new java.awt.GridBagLayout());

        jTextArea.setColumns(30);
        jTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea.setRows(5);
        jTextArea.setTabSize(4);
        jScrollPane.setViewportView(jTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel.add(jScrollPane, gridBagConstraints);

        jSplitPane.setLeftComponent(jPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(jSplitPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        getContentPane().add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        getContentPane().add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(filler4, gridBagConstraints);

        jMenuGrammar.setText("Grammar");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuGrammar.add(jMenuItemOpen);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuGrammar.add(jMenuItemSave);

        jMenuItemExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExport.setText("Export");
        jMenuItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExportActionPerformed(evt);
            }
        });
        jMenuGrammar.add(jMenuItemExport);

        jMenuItemReadFromArea.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemReadFromArea.setText("Read from Area");
        jMenuItemReadFromArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReadFromAreaActionPerformed(evt);
            }
        });
        jMenuGrammar.add(jMenuItemReadFromArea);

        jMenuBar.add(jMenuGrammar);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        readGrammar();
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jButtonFollowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFollowActionPerformed
        findFollow();
    }//GEN-LAST:event_jButtonFollowActionPerformed

    private void jButtonFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFirstActionPerformed
        findFirst();
    }//GEN-LAST:event_jButtonFirstActionPerformed

    private void jButtonLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLevelActionPerformed
        sortGrammar();
        jButtonSubstitution.setEnabled(true);
        jRadioButtonLevelsL.setEnabled(true);
        jRadioButtonLevelsR.setEnabled(true);
        jRadioButtonRelationL.setEnabled(true);
        jRadioButtonRelationR.setEnabled(true);
    }//GEN-LAST:event_jButtonLevelActionPerformed

    private void jRadioButtonGrammarLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonGrammarLActionPerformed
        displayGrammar(jTextAreaLeft);
    }//GEN-LAST:event_jRadioButtonGrammarLActionPerformed

    private void jRadioButtonGrammarRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonGrammarRActionPerformed
        displayGrammar(jTextAreaRight);
    }//GEN-LAST:event_jRadioButtonGrammarRActionPerformed

    private void jRadioButtonRelationLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRelationLActionPerformed
        displayRelation(jTextAreaLeft);
    }//GEN-LAST:event_jRadioButtonRelationLActionPerformed

    private void jRadioButtonRelationRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRelationRActionPerformed
        displayRelation(jTextAreaRight);
    }//GEN-LAST:event_jRadioButtonRelationRActionPerformed

    private void jRadioButtonLevelsLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLevelsLActionPerformed
        displayLevels(jTextAreaLeft);
    }//GEN-LAST:event_jRadioButtonLevelsLActionPerformed

    private void jRadioButtonLevelsRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLevelsRActionPerformed
        displayLevels(jTextAreaRight);
    }//GEN-LAST:event_jRadioButtonLevelsRActionPerformed

    private void jButtonSubstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubstitutionActionPerformed
        substitution();
    }//GEN-LAST:event_jButtonSubstitutionActionPerformed

    private void jRadioButtonLogLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLogLActionPerformed
        displayLog(jTextAreaLeft);
    }//GEN-LAST:event_jRadioButtonLogLActionPerformed

    private void jRadioButtonLogRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLogRActionPerformed
        displayLog(jTextAreaRight);
    }//GEN-LAST:event_jRadioButtonLogRActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        saveGrammar();
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExportActionPerformed
        if (sGrammar != null) {
            jTextArea.setText(sGrammar);
        } else {
            showError("No grammar to export.");
        }
    }//GEN-LAST:event_jMenuItemExportActionPerformed

    private void jMenuItemReadFromAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReadFromAreaActionPerformed
        readFromArea();
    }//GEN-LAST:event_jMenuItemReadFromAreaActionPerformed
    
    
    
    private void saveGrammar() {
        int result = fileDialog.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedWriter br = new BufferedWriter(new FileWriter(fileDialog.getSelectedFile()));
                br.append(getGrammarFromArea());
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, "Can't save file", ex);
                showError("Sorry, can't save file.");
            }
        }
    }
    
    private String getGrammarFromArea() {
        return jTextArea.getText().replaceAll("[\r\n]+$", "");
    }
    
    private void readGrammar() {
        int result = fileDialog.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File fin = fileDialog.getSelectedFile();
            // TODO: exception handling
            try {
                // fill TextArea
                readFileToArea(jTextArea, fin);
                
                // read grammar
                BufferedReader br = new BufferedReader(new FileReader(fin));
                curGrammar = GrammarCoding.Coding(br);
                // put terminals and nonterminals in TextAreas
                setGrammarString();
                displaySymbols();
                enableButtons();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("File not found. Please check specified file.");
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("Error when reading file.");
            } catch (ReadGrammarException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError(ex.getMessage());
            } catch (TooLongRuleException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError(ex.getMessage());
            } catch (IncorrectSymbolCodeException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError(ex.getMessage());
            } catch (NullPointerException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("Grammar header is incorrect.\nPossible headers: CFRG and CFG.");
            }
        }
    }
    
    private void readFromArea() {
        // read grammar
        BufferedReader br = new BufferedReader(new StringReader(getGrammarFromArea()));
        try {
            curGrammar = GrammarCoding.Coding(br);
            // put terminals and nonterminals in TextAreas
            setGrammarString();
            displaySymbols();
            enableButtons();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError("Error when reading file.");
        } catch (ReadGrammarException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError(ex.getMessage());
        } catch (TooLongRuleException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError(ex.getMessage());
        } catch (IncorrectSymbolCodeException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError(ex.getMessage());
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError("Grammar header is incorrect.\nPossible headers: CFRG and CFG.");
        }
    }
    
    private void displaySymbols() {
        // clear area
        jTextAreaNonterminals.setText(null);
        jTextAreaTerminals.setText(null);
        
        StringBuilder sb = new StringBuilder();
        SymbolicTable st = curGrammar.getpSymTable();
        
        // display Nonterminals
        int[] bounds = st.getpNbounds();
        for (int i = bounds[SymbolicTable.MIN]; i < bounds[SymbolicTable.CURR]; i++) {
            sb.append(st.getSymbol(i)).append(", ");
        }
        sb.setCharAt(sb.length() - 2, '.');
        jTextAreaNonterminals.append(sb.toString());
        sb.delete(0, sb.length());
        
        // display Terminals
        bounds = st.getpTbounds();
        for (int i = bounds[SymbolicTable.MIN]; i < bounds[SymbolicTable.CURR]; i++) {
            sb.append(st.getSymbol(i)).append(", ");
        }
        sb.setCharAt(sb.length() - 2, '.');
        jTextAreaTerminals.append(sb.toString());
    }
    
    private void displayGrammar(JTextArea area) {
        area.setText(sGrammar);
    }
    
    private void displayRelation(JTextArea area) {
        area.setText(relation);
    }
    
    private void displayLevels(JTextArea area) {
        area.setText(levels);
    }
    
    private void displayLog(JTextArea area) {
        try {
            readFileToArea(area, defaultLog);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError("Logfile hasn't found");
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            showError("IOExeption oocurs while reading logfile");
        }
    }
    
    private void enableButtons() {
        if (curGrammar.getClass().equals(CFGrammar.class)) {
            jButtonFirst.setEnabled(true);
            jButtonFollow.setEnabled(true);
            jButtonLevel.setEnabled(false);
            jButtonSubstitution.setEnabled(false);
        } else {
            jButtonFirst.setEnabled(false);
            jButtonFollow.setEnabled(false);
            jButtonLevel.setEnabled(true);
            jButtonSubstitution.setEnabled(false);
        }
        jRadioButtonGrammarL.setEnabled(true);
        jRadioButtonGrammarR.setEnabled(true);
        jRadioButtonGrammarL.setSelected(false);
        jRadioButtonGrammarR.setSelected(false);
        jRadioButtonLevelsL.setEnabled(false);
        jRadioButtonLevelsR.setEnabled(false);
        jRadioButtonLogL.setEnabled(false);
        jRadioButtonLogR.setEnabled(false);
        jRadioButtonRelationL.setEnabled(false);
        jRadioButtonRelationR.setEnabled(false);
    }
    
    private void setGrammarString() {
        if (curGrammar.getClass().equals(CFGrammar.class)) {
            sGrammar = ((CFGrammar) curGrammar).printGrammar();
        } else {
            sGrammar = ((CFRGrammar) curGrammar).printGrammar();
        }
    }
    
    private void findFirst() {
        if (checkGrammar()) {
            String[] input = jTextFieldForm.getText().split(",");
            SymbolicTable st = curGrammar.getpSymTable();
            CFGrammar gr = (CFGrammar) curGrammar;
            try {
                gr.initFirstTable(((Integer) jSpinnerK.getValue()).intValue());
                FirstSet fs = gr.getFirst(st.getFormCode(input));
                jTextAreaResult.setText(null);
                jTextAreaResult.append(gr.getFirstAsString(fs));
            } catch (IncorrectSymbolTypeException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("Some symbol in input sentential form is incorrect.");
            }
        }
    }
    
    private void findFollow() {
        if (checkGrammar()) {
            String input = jTextFieldForm.getText().trim();
            SymbolicTable st = curGrammar.getpSymTable();
            CFGrammar gr = (CFGrammar) curGrammar;
            int k = ((Integer) jSpinnerK.getValue()).intValue();
            try {
                FirstSet fs = gr.getFollow(input, k);
                jTextAreaResult.setText(null);
                jTextAreaResult.append(gr.getFirstAsString(fs));
            } catch (IncorrectSymbolTypeException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("Some symbol in input sentential form is incorrect.");
            }
        }
    }
    
    private void sortGrammar() {
        NonterminalLevels nl = TopologicalSort.sort(curGrammar);
        levels = nl.print(new StringBuilder()).toString();
        relation = curGrammar.printRelationTable(new StringBuilder()).toString();
    }
    
    private void substitution() {
        if (curGrammar.getClass().equals(CFRGrammar.class)) {
            try {
                boolean isSuccess = ((CFRGrammar) curGrammar).regularizeAndLog(defaultLog);
                if (isSuccess) {
                    jRadioButtonLogL.setEnabled(true);
                    jRadioButtonLogR.setEnabled(true);
                    setGrammarString();
                } else {
                    JOptionPane.showMessageDialog(this, "Grammar is not regular!", 
                            "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } catch (TooLongRuleException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                showError("Too long rule occures. Please increase max length of rule.");
            } catch (IOException ex) {
                showError("IOExeption oocurs while reading logfile");
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            showError("Substitution implemented only for CFR grammar");
        }
    }
    
    private void readFileToArea(JTextArea area, File file) 
            throws FileNotFoundException, IOException {
        readFileToArea(area, new FileReader(file));
    }
    
    private void readFileToArea(JTextArea area, FileDescriptor fd) 
            throws FileNotFoundException, IOException {
        readFileToArea(area, new FileReader(fd));
    }
    
    private void readFileToArea(JTextArea area, String file) 
            throws FileNotFoundException, IOException {
        readFileToArea(area, new FileReader(file));
    }
    
    private void readFileToArea(JTextArea area, Reader input) 
            throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(input);
        String line;
        area.setText(null);
        while ((line = br.readLine()) != null) {
            area.append(line.trim());
            area.append("\n");
        }
        br.close();
    }
    
    private boolean checkGrammar() {
        if (curGrammar != null) {
            if (!curGrammar.getClass().equals(CFGrammar.class)) {
                showError("Function 'First' is implemented only for Context Free Grammars.");
                return false;
            }
        } else {
            showError("No grammar for processing. \n Please, input or open grammar");
            return false;
        }
        return true;
    }
    
    private void showError(String msg) {
        JOptionPane.showMessageDialog(this, msg, 
                "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private class GrammarFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            String name = f.getName().toLowerCase();
            return name.endsWith(".grm") || name.endsWith(".txt") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "Grammar file";
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLeft;
    private javax.swing.ButtonGroup buttonGroupRight;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton jButtonFirst;
    private javax.swing.JButton jButtonFollow;
    private javax.swing.JButton jButtonLevel;
    private javax.swing.JButton jButtonSubstitution;
    private javax.swing.JLabel jLabelForm;
    private javax.swing.JLabel jLabelK;
    private javax.swing.JLabel jLabelLeft;
    private javax.swing.JLabel jLabelRight;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuGrammar;
    private javax.swing.JMenuItem jMenuItemExport;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemReadFromArea;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelLevels;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSymbols;
    private javax.swing.JRadioButton jRadioButtonGrammarL;
    private javax.swing.JRadioButton jRadioButtonGrammarR;
    private javax.swing.JRadioButton jRadioButtonLevelsL;
    private javax.swing.JRadioButton jRadioButtonLevelsR;
    private javax.swing.JRadioButton jRadioButtonLogL;
    private javax.swing.JRadioButton jRadioButtonLogR;
    private javax.swing.JRadioButton jRadioButtonRelationL;
    private javax.swing.JRadioButton jRadioButtonRelationR;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPaneLeft;
    private javax.swing.JScrollPane jScrollPaneNonterminals;
    private javax.swing.JScrollPane jScrollPaneResult;
    private javax.swing.JScrollPane jScrollPaneRight;
    private javax.swing.JScrollPane jScrollPaneTerminals;
    private javax.swing.JSpinner jSpinnerK;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JSplitPane jSplitPaneLevels;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextArea jTextAreaLeft;
    private javax.swing.JTextArea jTextAreaNonterminals;
    private javax.swing.JTextArea jTextAreaResult;
    private javax.swing.JTextArea jTextAreaRight;
    private javax.swing.JTextArea jTextAreaTerminals;
    private javax.swing.JTextField jTextFieldForm;
    // End of variables declaration//GEN-END:variables
}
